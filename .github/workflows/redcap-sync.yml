---
name: REDCap Sync Pipeline
on:
  schedule:
    - cron: 0 2 * * *  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      project_key:
        description: Specific project to sync (leave empty for all enabled projects)
        required: false
        type: string
      run_diagnostics:
        description: Run diagnostics only (no sync)
        required: false
        type: boolean
        default: false
jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up SSH tunnel
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
          ssh -4 -v -f -N \
            -o ServerAliveInterval=60 \
            -o ServerAliveCountMax=3 \
            -L 127.0.0.1:5432:127.0.0.1:5432 \
            $SSH_USER@$SSH_HOST
          echo "Waiting for SSH tunnel..."
          for i in {1..30}; do
            if nc -zv 127.0.0.1 5432 2>&1 | grep -q succeeded; then
              echo "Tunnel ready!"
              exit 0
            fi
            echo "Attempt $i/30..."
            sleep 2
          done
          echo "Tunnel failed to establish"
          exit 1
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          cd redcap-pipeline
          pip install -r requirements.txt
      - name: Create logs directory
        run: mkdir -p redcap-pipeline/logs
      - name: Run configuration diagnostics
        env:
          REDCAP_API_URL: ${{ secrets.REDCAP_API_URL }}
          REDCAP_PRIMARY_TOKEN: ${{ secrets.REDCAP_PRIMARY_TOKEN }}
          REDCAP_LEGACY_TOKEN: ${{ secrets.REDCAP_LEGACY_TOKEN }}
          REDCAP_TRIAL001_TOKEN: ${{ secrets.REDCAP_TRIAL001_TOKEN }}
          GSID_SERVICE_URL: https://api.idhub.ibdgc.org
          GSID_API_KEY: ${{ secrets.GSID_API_KEY }}
          DB_HOST: localhost
          DB_NAME: idhub
          DB_USER: idhub_user
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          S3_BUCKET: idhub-curated-fragments
        run: |
          cd redcap-pipeline
          python test_config.py
      - name: Run REDCap pipeline
        if: ${{ github.event.inputs.run_diagnostics != 'true' }}
        env:
          REDCAP_API_URL: ${{ secrets.REDCAP_API_URL }}
          REDCAP_PRIMARY_TOKEN: ${{ secrets.REDCAP_PRIMARY_TOKEN }}
          REDCAP_LEGACY_TOKEN: ${{ secrets.REDCAP_LEGACY_TOKEN }}
          REDCAP_TRIAL001_TOKEN: ${{ secrets.REDCAP_TRIAL001_TOKEN }}
          GSID_SERVICE_URL: https://api.idhub.ibdgc.org
          GSID_API_KEY: ${{ secrets.GSID_API_KEY }}
          DB_HOST: localhost
          DB_NAME: idhub
          DB_USER: idhub_user
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          S3_BUCKET: idhub-curated-fragments
          PROJECT_KEY: ${{ github.event.inputs.project_key }}
        run: |
          cd redcap-pipeline
          if [ -n "$PROJECT_KEY" ]; then
            echo "Running pipeline for specific project: $PROJECT_KEY"
            python main.py --project "$PROJECT_KEY"
          else
            echo "Running pipeline for all enabled projects"
            python main.py --all
          fi
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-logs-${{ github.run_id }}
          path: redcap-pipeline/logs/
          retention-days: 30
